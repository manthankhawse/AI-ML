{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"dockerImageVersionId":30804,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-12-03T02:05:07.189869Z","iopub.execute_input":"2024-12-03T02:05:07.190217Z","iopub.status.idle":"2024-12-03T02:05:08.267976Z","shell.execute_reply.started":"2024-12-03T02:05:07.190181Z","shell.execute_reply":"2024-12-03T02:05:08.265412Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/titanic/train.csv\n/kaggle/input/titanic/test.csv\n/kaggle/input/titanic/gender_submission.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"markdown","source":"# Basic data exploration","metadata":{}},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/titanic/train.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-03T02:05:59.584901Z","iopub.execute_input":"2024-12-03T02:05:59.585907Z","iopub.status.idle":"2024-12-03T02:05:59.606677Z","shell.execute_reply.started":"2024-12-03T02:05:59.585863Z","shell.execute_reply":"2024-12-03T02:05:59.605805Z"}},"outputs":[],"execution_count":2},{"cell_type":"markdown","source":"# How Big is the data?","metadata":{}},{"cell_type":"code","source":"df.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-03T02:06:04.943717Z","iopub.execute_input":"2024-12-03T02:06:04.944667Z","iopub.status.idle":"2024-12-03T02:06:04.950896Z","shell.execute_reply.started":"2024-12-03T02:06:04.944630Z","shell.execute_reply":"2024-12-03T02:06:04.949989Z"}},"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"(891, 12)"},"metadata":{}}],"execution_count":3},{"cell_type":"markdown","source":"# How does the data look like?","metadata":{}},{"cell_type":"code","source":"df.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-03T02:06:55.297586Z","iopub.execute_input":"2024-12-03T02:06:55.297997Z","iopub.status.idle":"2024-12-03T02:06:55.320803Z","shell.execute_reply.started":"2024-12-03T02:06:55.297962Z","shell.execute_reply":"2024-12-03T02:06:55.319598Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"#there might be bias in start or end of data so instead of head or tail we can use sample\ndf.sample(5)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-03T02:07:48.056417Z","iopub.execute_input":"2024-12-03T02:07:48.057334Z","iopub.status.idle":"2024-12-03T02:07:48.082011Z","shell.execute_reply.started":"2024-12-03T02:07:48.057277Z","shell.execute_reply":"2024-12-03T02:07:48.080834Z"}},"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"     PassengerId  Survived  Pclass                             Name     Sex  \\\n682          683         0       3      Olsvigen, Mr. Thor Anderson    male   \n691          692         1       3               Karun, Miss. Manca  female   \n256          257         1       1   Thorne, Mrs. Gertrude Maybelle  female   \n614          615         0       3  Brocklebank, Mr. William Alfred    male   \n105          106         0       3            Mionoff, Mr. Stoytcho    male   \n\n      Age  SibSp  Parch    Ticket     Fare Cabin Embarked  \n682  20.0      0      0      6563   9.2250   NaN        S  \n691   4.0      0      1    349256  13.4167   NaN        C  \n256   NaN      0      0  PC 17585  79.2000   NaN        C  \n614  35.0      0      0    364512   8.0500   NaN        S  \n105  28.0      0      0    349207   7.8958   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>682</th>\n      <td>683</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Olsvigen, Mr. Thor Anderson</td>\n      <td>male</td>\n      <td>20.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>6563</td>\n      <td>9.2250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>691</th>\n      <td>692</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Karun, Miss. Manca</td>\n      <td>female</td>\n      <td>4.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>349256</td>\n      <td>13.4167</td>\n      <td>NaN</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>256</th>\n      <td>257</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Thorne, Mrs. Gertrude Maybelle</td>\n      <td>female</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>0</td>\n      <td>PC 17585</td>\n      <td>79.2000</td>\n      <td>NaN</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>614</th>\n      <td>615</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Brocklebank, Mr. William Alfred</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>364512</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>105</th>\n      <td>106</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Mionoff, Mr. Stoytcho</td>\n      <td>male</td>\n      <td>28.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>349207</td>\n      <td>7.8958</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":6},{"cell_type":"markdown","source":"# What is the type of data?","metadata":{}},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-03T02:08:13.131874Z","iopub.execute_input":"2024-12-03T02:08:13.132335Z","iopub.status.idle":"2024-12-03T02:08:13.154928Z","shell.execute_reply.started":"2024-12-03T02:08:13.132288Z","shell.execute_reply":"2024-12-03T02:08:13.154007Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Name         891 non-null    object \n 4   Sex          891 non-null    object \n 5   Age          714 non-null    float64\n 6   SibSp        891 non-null    int64  \n 7   Parch        891 non-null    int64  \n 8   Ticket       891 non-null    object \n 9   Fare         891 non-null    float64\n 10  Cabin        204 non-null    object \n 11  Embarked     889 non-null    object \ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB\n","output_type":"stream"}],"execution_count":7},{"cell_type":"markdown","source":"# Are there missing values?","metadata":{}},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-03T02:09:53.178940Z","iopub.execute_input":"2024-12-03T02:09:53.179955Z","iopub.status.idle":"2024-12-03T02:09:53.189745Z","shell.execute_reply.started":"2024-12-03T02:09:53.179906Z","shell.execute_reply":"2024-12-03T02:09:53.188684Z"}},"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"PassengerId      0\nSurvived         0\nPclass           0\nName             0\nSex              0\nAge            177\nSibSp            0\nParch            0\nTicket           0\nFare             0\nCabin          687\nEmbarked         2\ndtype: int64"},"metadata":{}}],"execution_count":8},{"cell_type":"markdown","source":"# How does the data look mathematically?","metadata":{}},{"cell_type":"code","source":"df.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-03T02:10:34.295856Z","iopub.execute_input":"2024-12-03T02:10:34.296885Z","iopub.status.idle":"2024-12-03T02:10:34.333364Z","shell.execute_reply.started":"2024-12-03T02:10:34.296829Z","shell.execute_reply":"2024-12-03T02:10:34.332212Z"}},"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"       PassengerId    Survived      Pclass         Age       SibSp  \\\ncount   891.000000  891.000000  891.000000  714.000000  891.000000   \nmean    446.000000    0.383838    2.308642   29.699118    0.523008   \nstd     257.353842    0.486592    0.836071   14.526497    1.102743   \nmin       1.000000    0.000000    1.000000    0.420000    0.000000   \n25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n75%     668.500000    1.000000    3.000000   38.000000    1.000000   \nmax     891.000000    1.000000    3.000000   80.000000    8.000000   \n\n            Parch        Fare  \ncount  891.000000  891.000000  \nmean     0.381594   32.204208  \nstd      0.806057   49.693429  \nmin      0.000000    0.000000  \n25%      0.000000    7.910400  \n50%      0.000000   14.454200  \n75%      0.000000   31.000000  \nmax      6.000000  512.329200  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>714.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>446.000000</td>\n      <td>0.383838</td>\n      <td>2.308642</td>\n      <td>29.699118</td>\n      <td>0.523008</td>\n      <td>0.381594</td>\n      <td>32.204208</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>257.353842</td>\n      <td>0.486592</td>\n      <td>0.836071</td>\n      <td>14.526497</td>\n      <td>1.102743</td>\n      <td>0.806057</td>\n      <td>49.693429</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.420000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>223.500000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>20.125000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>7.910400</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>446.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>28.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>14.454200</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>668.500000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>38.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>31.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>891.000000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>80.000000</td>\n      <td>8.000000</td>\n      <td>6.000000</td>\n      <td>512.329200</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":9},{"cell_type":"markdown","source":"# Duplicates?","metadata":{}},{"cell_type":"code","source":"df.duplicated().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-03T02:11:56.331223Z","iopub.execute_input":"2024-12-03T02:11:56.332267Z","iopub.status.idle":"2024-12-03T02:11:56.342000Z","shell.execute_reply.started":"2024-12-03T02:11:56.332212Z","shell.execute_reply":"2024-12-03T02:11:56.341002Z"}},"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"0"},"metadata":{}}],"execution_count":10},{"cell_type":"markdown","source":"# Correlation between columns","metadata":{}},{"cell_type":"code","source":"# Select only numeric columns\nnumeric_df = df.select_dtypes(include=[np.number])\n\n# Calculate correlation\ncorrelation_matrix = numeric_df.corr()\nprint(correlation_matrix)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-03T02:14:41.052529Z","iopub.execute_input":"2024-12-03T02:14:41.053381Z","iopub.status.idle":"2024-12-03T02:14:41.065148Z","shell.execute_reply.started":"2024-12-03T02:14:41.053335Z","shell.execute_reply":"2024-12-03T02:14:41.064014Z"}},"outputs":[{"name":"stdout","text":"             PassengerId  Survived    Pclass       Age     SibSp     Parch  \\\nPassengerId     1.000000 -0.005007 -0.035144  0.036847 -0.057527 -0.001652   \nSurvived       -0.005007  1.000000 -0.338481 -0.077221 -0.035322  0.081629   \nPclass         -0.035144 -0.338481  1.000000 -0.369226  0.083081  0.018443   \nAge             0.036847 -0.077221 -0.369226  1.000000 -0.308247 -0.189119   \nSibSp          -0.057527 -0.035322  0.083081 -0.308247  1.000000  0.414838   \nParch          -0.001652  0.081629  0.018443 -0.189119  0.414838  1.000000   \nFare            0.012658  0.257307 -0.549500  0.096067  0.159651  0.216225   \n\n                 Fare  \nPassengerId  0.012658  \nSurvived     0.257307  \nPclass      -0.549500  \nAge          0.096067  \nSibSp        0.159651  \nParch        0.216225  \nFare         1.000000  \n","output_type":"stream"}],"execution_count":12},{"cell_type":"code","source":"correlation_matrix['Survived']","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-03T02:15:01.083558Z","iopub.execute_input":"2024-12-03T02:15:01.083930Z","iopub.status.idle":"2024-12-03T02:15:01.091460Z","shell.execute_reply.started":"2024-12-03T02:15:01.083898Z","shell.execute_reply":"2024-12-03T02:15:01.090444Z"}},"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"PassengerId   -0.005007\nSurvived       1.000000\nPclass        -0.338481\nAge           -0.077221\nSibSp         -0.035322\nParch          0.081629\nFare           0.257307\nName: Survived, dtype: float64"},"metadata":{}}],"execution_count":13},{"cell_type":"markdown","source":"# Univariate Analysis","metadata":{}},{"cell_type":"markdown","source":"Univariate analysis basically means separate analysis of each column of the dataset","metadata":{}},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}